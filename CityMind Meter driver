/* CityMind meter driver
*  
*	NOTES:  This app is used to keep track of your ARAD water meter after you have a username and password to the ReadYourMeterPro web site (https://rym-pro.com). 
* 
*    Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at
*    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS,
*    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
*
*	Change Revision History:  
*	Ver		Date:		Who:		What:
* 	1.0.0	2024-06-15	amithalp	Initial release version
* 	
*/
metadata {
    definition (name: "CityMind Meter", namespace: "amithalp", author: "Amit Halperin") {
        capability "Sensor"
        capability "Refresh"

        attribute "accountNumber", "string"
        attribute "firstName", "string"
        attribute "lastName", "string"
        attribute "municipalId", "string"
        attribute "countryCode", "string"
        attribute "phoneNumber", "string"
        attribute "meterCount", "string"
        attribute "meterId", "string"
        attribute "read", "string"
        attribute "consumptionForecast", "string"
        attribute "lastPollTime", "string"
        attribute "todayConsumption", "string"
        attribute "monthlyConsumption", "string"
    }

    command "refresh"
}

def installed() {
    log.debug "Installed with settings: ${settings}"
    initializeDevice()
}

def updated() {
    log.debug "Updated with settings: ${settings}"
    initializeDevice()
}

def initializeDevice() {
    updateLastPollTime()
}

def updateLastPollTime() {
    def now = new Date().format("yyyy-MM-dd HH:mm:ss", location.timeZone)
    sendEvent(name: "lastPollTime", value: now)
}

def parse(String description) {
    log.debug "Parsing '${description}'"
}

def refresh() {
    parent.refreshDevice(device.deviceNetworkId)
    parent.getDailyConsumption(device.deviceNetworkId)
    parent.getMonthlyConsumption(device.deviceNetworkId)
    parent.getConsumptionForecast(device.deviceNetworkId)
    updateLastPollTime()  // Update the last poll time whenever the device is refreshed
}
